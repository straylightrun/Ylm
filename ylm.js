// http://www.physics.drexel.edu/~tim/open/hydrofin/hyd.pdf

// Bohr Radius
var a = 1; 
// Boundaries for sampling (as multiples of Bohr Radius)
var XMAX = 20*a; // +/- this value
var YMAX = 20*a;
var ZMAX = 20*a;
// Max number of samples for rejection sampling of wave function
var SAMPLEMAX = 20000; 
// Max Psi2 value (for rejection sampling)
var M = 0.5;
// Constants for speeding up calculations
var SQRT2 = 1.41421356237309504880;
var SQRT3 = 1.73205080757;
var PI = math.pi;
var PI2 = 2*math.pi;
var PI4 = 4*math.pi

function L(l, n, r) {
	// Associated Laguerre polynomial
	// http://mathworld.wolfram.com/AssociatedLaguerrePolynomial.html

	var tmp = 0.0;
	for(var i = 0; i <= n; i++) {
		tmp += (math.factorial(n)/math.factorial(i)) * math.combinations(l + n, n - i) * math.pow(-r, i);
	}

	return (1/math.factorial(n)) * tmp;
}

function R(n, l, r) {
	// Radial Equation
	return math.sqrt(math.factorial(n - l - 1) / 
                        (2*n*(math.factorial(n+l))) * 
                        math.pow(2/(n*a), 3)) * 
                        math.exp(-r/(n*a)) * 
                        math.pow(((2*r)/(n*a)), l) *
                        L(2*l + 1, n - l - 1, (2*r)/(n*a) );
}

/*
    Associated Legendre Polynomials
    Spherical Harmonics using the "Numerical Recipes" method
    http://www.aip.de/groups/soe/local/numres/bookcpdf/c6-8.pdf
*/
function Plm(l, m, x) {

    if(m < 0 || m > l || Math.abs(x) > 1.0) {
        console.log("Plm: Invalid values");
        return null;
    }
    
    var pmm = 1.0;
    var fact, pmmp1, pll, somx2, i, ll;

    // Compute Pmm
    if(m > 0) {
        somx2 = Math.sqrt((1.0 - x)*(1.0 + x));
        fact = 1.0;
        for(i = 1; i <= m; i++) {
            pmm *= -fact * somx2;
            fact += 2;
        }
    }


    if(l == m) {
        return pmm;
    } else {
        // Compute P(m)(m+1)
        pmmp1 = x*(2*m + 1)*pmm;
        if(l == (m+1)) {
            return pmmp1;
        } else {
            // Compute Pml where l > m + 1
            for(ll = m + 2; ll <= l; ll++) {
                pll = (x*(2*ll-1)*pmmp1-(ll+m-1)*pmm)/(ll-m);
                pmm = pmmp1;
                pmmp1 = pll;
            }
            return pll;
        }
    }
}

function Ylm(l, m, theta, phi) {
	// Real Spherical Harmonics

    if(m < 0) {
        return Math.sqrt( ((2*l + 1) * math.factorial(l - math.abs(m)) ) /(PI4*math.factorial(l + math.abs(m))) ) * Plm(l, math.abs(m), math.cos(theta)) * math.sin(math.abs(m) * phi) * SQRT2;  
    } else if(m == 0) {
        return Math.sqrt((2*l + 1)/(PI4) ) * Plm(l, 0, math.cos(theta));
    } else {
        return Math.sqrt( ((2*l + 1) * math.factorial(l - math.abs(m)) ) /(PI4*math.factorial(l + math.abs(m))) ) * Plm(l, m, math.cos(theta)) * math.sin(m * phi) * SQRT2;  
    }
}


function Psi2(n, l, m, r, theta, phi) {
    // Hydrogen atom wave function
    // Squared to get probability
    var tmp = R(n,l,r) * Ylm(l,m,theta,phi);
    return tmp * tmp;
}

function NormalZigg() {
    var x = [3.654152885361009,
            3.4492782985609645,
            3.3202447338391661,
            3.2245750520470291,
            3.14788928951715,
            3.083526132001233,
            3.0278377917686354,
            2.9786032798808448,
            2.9343668672078542,
            2.8941210536123481,
            2.8571387308721325,
            2.8228773968253251,
            2.7909211740007858,
            2.7609440052788226,
            2.7326853590428271,
            2.7059336561218581,
            2.6805146432845222,
            2.6562830375755024,
            2.6331163936303246,
            2.6109105184875485,
            2.5895759867069952,
            2.5690354526805366,
            2.5492215503234608,
            2.5300752321585169,
            2.5115444416253423,
            2.4935830412696807,
            2.4761499396691433,
            2.4592083743333113,
            2.4427253181989568,
            2.426670984935726,
            2.4110184138996855,
            2.3957431197804806,
            2.380822795170626,
            2.3662370567158186,
            2.35196722737766,
            2.3379961487950314,
            2.324308018869623,
            2.31088825059985,
            2.2977233489013296,
            2.2848008027229461,
            2.2721089902268239,
            2.2596370951722178,
            2.2473750329458078,
            2.235313384928328,
            2.2234433400909057,
            2.2117566428825444,
            2.200245546609648,
            2.1889027716247207,
            2.1777214677386416,
            2.166695180352646,
            2.1558178198750633,
            2.1450836340462036,
            2.1344871828443202,
            2.1240233156878157,
            2.113687150684934,
            2.1034740557131468,
            2.0933796311370503,
            2.0833996939965518,
            2.0735302635169788,
            2.0637675478099564,
            2.0541079316488648,
            2.0445479652157328,
            2.0350843537278087,
            2.025713947862033,
            2.0164337349043717,
            2.0072408305586849,
            1.9981324713565642,
            1.9891060076155713,
            1.9801588968985984,
            1.9712886979317696,
            1.9624930649424619,
            1.953769742382734,
            1.9451165600067539,
            1.9365314282737589,
            1.9280123340507183,
            1.9195573365912288,
            1.9111645637692822,
            1.9028322085484464,
            1.8945585256687101,
            1.8863418285347764,
            1.8781804862909777,
            1.8700729210692368,
            1.8620176053976323,
            1.8540130597581481,
            1.8460578502831198,
            1.8381505865807286,
            1.8302899196806666,
            1.8224745400917832,
            1.8147031759641676,
            1.8069745913486934,
            1.7992875845475802,
            1.79164098655001,
            1.7840336595472763,
            1.776464495522345,
            1.7689324149090779,
            1.7614363653167067,
            1.7539753203154551,
            1.746548278279493,
            1.739154261283669,
            1.7317923140507072,
            1.7244615029457757,
            1.7171609150155407,
            1.7098896570690061,
            1.7026468547976139,
            1.6954316519322385,
            1.6882432094348587,
            1.6810807047228233,
            1.6739433309237604,
            1.6668302961592867,
            1.6597408228557895,
            1.6526741470806485,
            1.6456295179023603,
            1.6386061967731111,
            1.631603456932422,
            1.6246205828305684,
            1.6176568695705342,
            1.6107116223673337,
            1.603784156023583,
            1.5968737944202613,
            1.5899798700216485,
            1.5831017233934714,
            1.5762387027333329,
            1.5693901634125345,
            1.5625554675284397,
            1.5557339834665549,
            1.5489250854715355,
            1.5421281532263476,
            1.5353425714388431,
            1.5285677294350246,
            1.5218030207582931,
            1.5150478427739924,
            1.508301596278572,
            1.5015636851127065,
            1.4948335157777184,
            1.4881104970546544,
            1.4813940396253757,
            1.4746835556950255,
            1.4679784586152309,
            1.4612781625074078,
            1.4545820818855233,
            1.4478896312776697,
            1.441200224845798,
            1.4345132760029464,
            1.4278281970272904,
            1.4211443986723231,
            1.4144612897724647,
            1.4077782768433715,
            1.4010947636762026,
            1.3944101509250713,
            1.3877238356868846,
            1.381035211072742,
            1.3743436657700305,
            1.367648583594318,
            1.3609493430301018,
            1.3542453167594306,
            1.3475358711773593,
            1.3408203658931521,
            1.3340981532160836,
            1.3273685776246247,
            1.3206309752177301,
            1.313884673146869,
            1.3071289890273539,
            1.3003632303274337,
            1.2935866937335176,
            1.2867986644897864,
            1.2799984157103332,
            1.2731852076618437,
            1.2663582870146883,
            1.2595168860601442,
            1.2526602218912979,
            1.2457874955449979,
            1.2388978911020274,
            1.2319905747424451,
            1.225064693752808,
            1.2181193754817266,
            1.2111537262399112,
            1.2041668301405601,
            1.1971577478755859,
            1.1901255154228016,
            1.1830691426787607,
            1.1759876120114898,
            1.1688798767268338,
            1.1617448594415742,
            1.1545814503558518,
            1.1473885054167339,
            1.1401648443639958,
            1.132909248648337,
            1.1256204592112944,
            1.1182971741150629,
            1.1109380460092495,
            1.1035416794202682,
            1.0961066278476035,
            1.0886313906495142,
            1.0811144096988894,
            1.0735540657878717,
            1.0659486747575067,
            1.0582964833260065,
            1.0505956645862071,
            1.0428443131393705,
            1.0350404398286053,
            1.0271819660307513,
            1.0192667174605292,
            1.0112924174349784,
            1.0032566795395914,
            0.99515699962994308,
            0.98699074709384627,
            0.97875515528893775,
            0.97044731105886461,
            0.96206414321760525,
            0.95360240987557265,
            0.94505868446257113,
            0.93642934028089686,
            0.92771053339623477,
            0.91889818364373499,
            0.909987953490769,
            0.90097522445517453,
            0.89185507072679238,
            0.88262222957891012,
            0.87327106808249455,
            0.86379554554682692,
            0.85418917100156055,
            0.84444495490242366,
            0.83455535407951875,
            0.82451220874528863,
            0.81430667012806435,
            0.80392911698266489,
            0.79336905883315278,
            0.78261502329958876,
            0.77165442421673935,
            0.76047340642208328,
            0.74905666200958165,
            0.73738721142583863,
            0.72544614090130355,
            0.71321228518202262,
            0.70066184109758445,
            0.68776789278625772,
            0.67449982282743648,
            0.66082257423420598,
            0.64669571488438893,
            0.63207223637502463,
            0.61689698999623566,
            0.60110461774394042,
            0.58461676609372226,
            0.56733825704047314,
            0.54915170231302679,
            0.52990972064649511,
            0.50942332958593339,
            0.48744396612175434,
            0.46363433677176324,
            0.43751840218666266,
            0.40838913458800075,
            0.37512133285046578,
            0.33573751918045946,
            0.28617459174726051,
            0.21524189591327381];
    var y = [0.001260285930498598,
             0.0026090727461063629,
             0.0040379725933718715,
             0.005522403299264754,
             0.0070508754713921101,
             0.0086165827694229171,
             0.0102149714397311,
             0.011842757857943104,
             0.013497450601780807,
             0.015177088307982072,
             0.016880083152595839,
             0.01860512127578335,
             0.020351096230109354,
             0.022117062707379922,
             0.023902203305873237,
             0.025705804008632656,
             0.027527235669693315,
             0.029365939758230111,
             0.03122141719202369,
             0.033093219458688698,
             0.034980941461833073,
             0.036884215688691151,
             0.038802707404656918,
             0.040736110656078753,
             0.042684144916619378,
             0.044646552251446536,
             0.046623094902089664,
             0.048613553216035145,
             0.050617723861121788,
             0.052635418276973649,
             0.054666461325077916,
             0.056710690106399467,
             0.058767952921137984,
             0.060838108349751806,
             0.062921024437977854,
             0.065016577971470438,
             0.067124653828023989,
             0.069245144397250269,
             0.071377949059141965,
             0.073522973714240991,
             0.075680130359194964,
             0.077849336702372207,
             0.080030515814947509,
             0.082223595813495684,
             0.084428509570654661,
             0.086645194450867782,
             0.088873592068594229,
             0.091113648066700734,
             0.093365311913026619,
             0.095628536713353335,
             0.097903279039215627,
             0.10018949876917202,
             0.10248715894230627,
             0.10479622562286706,
             0.10711666777507288,
             0.10944845714721002,
             0.11179156816424558,
             0.11414597782825521,
             0.11651166562603701,
             0.1188886134433457,
             0.12127680548523544,
             0.1236762282020514,
             0.12608687022065035,
             0.12850872228047364,
             0.13094177717412817,
             0.13338602969216284,
             0.13584147657175735,
             0.13830811644906432,
             0.14078594981496831,
             0.14327497897404712,
             0.14577520800653793,
             0.14828664273312872,
             0.15080929068241017,
             0.15334316106083767,
             0.15588826472506456,
             0.15844461415652022,
             0.16101222343811766,
             0.16359110823298295,
             0.16618128576511007,
             0.16878277480185033,
             0.17139559563815562,
             0.17401977008249936,
             0.17665532144440665,
             0.1793022745235304,
             0.18196065560021649,
             0.18463049242750454,
             0.18731181422451693,
             0.19000465167119307,
             0.19270903690432881,
             0.19542500351488559,
             0.19815258654653811,
             0.20089182249543133,
             0.2036427493111215,
             0.20640540639867933,
             0.20917983462193565,
             0.21196607630785294,
             0.2147641752520085,
             0.21757417672517837,
             0.22039612748101159,
             0.22323007576478959,
             0.22607607132326488,
             0.22893416541557748,
             0.23180441082524852,
             0.23468686187325269,
             0.23758157443217368,
             0.24048860594144911,
             0.24340801542371199,
             0.24633986350223877,
             0.2492842124195167,
             0.25224112605694377,
             0.25521066995567715,
             0.25819291133864802,
             0.26118791913376371,
             0.26419576399831757,
             0.26721651834463184,
             0.27025025636695998,
             0.2732970540696758,
             0.27635698929678126,
             0.27943014176276532,
             0.28251659308484939,
             0.28561642681665811,
             0.28872972848335393,
             0.29185658561828098,
             0.29499708780116257,
             0.29815132669790134,
             0.30131939610203412,
             0.30450139197789627,
             0.30769741250555377,
             0.31090755812756371,
             0.31413193159763014,
             0.3173706380312224,
             0.32062378495823013,
             0.32389148237773202,
             0.32717384281495859,
             0.3304709813805371,
             0.33378301583210851,
             0.33711006663841281,
             0.34045225704594545,
             0.34380971314829134,
             0.34718256395825148,
             0.3505709414828812,
             0.35397498080156925,
             0.35739482014729052,
             0.36083060099117575,
             0.3642824681305496,
             0.36775056978059623,
             0.37123505766982134,
             0.37473608713949141,
             0.37825381724723811,
             0.38178841087503135,
             0.38534003484173396,
             0.3889088600204646,
             0.39249506146101076,
             0.39609881851754708,
             0.39972031498193167,
             0.40335973922286888,
             0.40701728433124795,
             0.41069314827198322,
             0.41438753404270678,
             0.41810064983968459,
             0.4218327092313533,
             0.42558393133990058,
             0.42935454103134152,
             0.43314476911457406,
             0.43695485254992927,
             0.44078503466776991,
             0.44463556539772775,
             0.44850670150921407,
             0.4523987068638825,
             0.45631185268077357,
             0.46024641781492348,
             0.46420268905027884,
             0.46818096140782217,
             0.47218153846988326,
             0.47620473272168379,
             0.48025086591124971,
             0.4843202694289116,
             0.48841328470771206,
             0.49253026364614866,
             0.49667156905479631,
             0.50083757512848215,
             0.50502866794582879,
             0.50924524599813614,
             0.51348772074974303,
             0.51775651723220062,
             0.52205207467479486,
             0.5263748471741867,
             0.53072530440619392,
             0.53510393238301956,
             0.53951123425954461,
             0.54394773119264994,
             0.54841396325792113,
             0.55291049042851992,
             0.55743789362148632,
             0.56199677581727792,
             0.56658776325895177,
             0.57121150673807497,
             0.57586868297521054,
             0.58055999610368347,
             0.58528617926630033,
             0.59004799633579197,
             0.59484624377099127,
             0.59968175262216772,
             0.60455539070054953,
             0.60946806492889538,
             0.6144207238920768,
             0.61941436060903921,
             0.62445001555027424,
             0.62952877992812828,
             0.63465179929096005,
             0.63982027745643899,
             0.64503548082425188,
             0.65029874311429459,
             0.65561147058322466,
             0.66097514778024136,
             0.66639134391238064,
             0.67186171990076637,
             0.67738803622251309,
             0.68297216164879138,
             0.68861608300852706,
             0.69432191613003258,
             0.7000919181404901,
             0.70592850133679741,
             0.71183424888235847,
             0.7178119326349014,
             0.7238645334728816,
             0.72999526456580244,
             0.73620759813126668,
             0.74250529634463625,
             0.74889244722372672,
             0.7553735065117545,
             0.76195334684154647,
             0.76863731580333483,
             0.77543130498613833,
             0.7823418326598619,
             0.78937614357119856,
             0.79654233042825462,
             0.80384948317638949,
             0.81130787431821993,
             0.8189291916094148,
             0.82672683395209423,
             0.83471629299293038,
             0.84291565311844108,
             0.85134625846512368,
             0.86003362120300864,
             0.86900868804379316,
             0.87830965581614684,
             0.88798466076339988,
             0.89809592190630405,
             0.90872644006056291,
             0.91999150504836025,
             0.93206007596899021,
             0.94519895345307803,
             0.95987909181241593,
             0.97710170128273133];
    var area = 0.00492867323399; // Area of each segment (Except 0)
    var seg0Area = 0.0047996569901630039; // Area - AreaOfTail

    function drawNormal(mu, s2) {
        /* Sample from Normal via Ziggurat Algorithm (256 segments)
            http://heliosphan.org/zigguratalgorithm/zigguratalgorithm.html
           Requires:
            - mu: mean
            - s2: variance
        */
        var retVal = null;
        var neg = Math.random() > 0.5 ? -1 : 1;

        for(var tries = 0; tries < 1000; tries++) {    
             // Randomly select a segment
             var i = Math.floor(Math.random()*255);
            
             if(i == 0) {  // Segment0 is special
                var w = Math.random() * area;

                if(w <= seg0Area) { // Not in Tail
                    retVal = w/y[0];
                    break;
                } else { // In Tail

                    //console.log("Tail");
                    for(var j = 0; j < 1000; j++) {
                        var xs = -Math.log(Math.random())/x[1];
                        var ys = -Math.log(Math.random());
                        if(2*ys > xs*xs) {
                            retVal = xs + x[1];
                            break;
                        }
                    }
                    retVal = null;
                }
             } else {
                var pt = Math.random() * x[i];

                if(pt < x[i+1]) {
                    retVal = pt;
                    break;
                } else {
                    var ypt = Math.random() * (y[i+1] - y[i]) + y[i]; 

                    if(ypt < Math.exp(-(pt*pt)/2.)) {
                        retVal = pt;
                        break;
                    } 
                }
             }
        }


        return neg * retVal * Math.sqrt(s2) + mu;
    }

    return drawNormal;
}

function Normal(mu, s2, n) {
    /* Sample from normal via convolution of Uniform dist
       Requires:
        - mu: mean
        - s2: variance
        - n: num uniform samples to convolve
    */
    var sum = 0;
    var sig = Math.sqrt(s2/n);

    for (var i = 0; i < n; i++) {
        sum += Math.random();
    }
    sum *= 2*sig*SQRT3;
    sum -= n*sig*SQRT3;

    return mu + sum;
}

function MHSamplePsi2(n, l, m, samples, burn, skip) {
    /*
        Use Metropolis-Hastings to sample from Psi2.
        Requires:
            - n,l,m: quantum numbers
            - samples: number of samples to take from distribution total
            - burn: how many should be thrown away at the beginning
            - skip: return ever skipth sample
        Returns:
            - Array of samples in SP coordinates
    */

    if(burn > samples) {
        console.log("MMsamplePsi2: Can't burn more than total number of samples");
        return null;
    }

    // Initial state
    var x, y, z, r, theta, phi, p, u;

    nz = NormalZigg(); // Normal dist

    x = math.random() * 2 * XMAX - XMAX;
    y = math.random() * 2 * YMAX - YMAX;
    z = math.random() * 2 * ZMAX - ZMAX;

    // Start sampling
    var sampled = [];
    var p = 0;

    for(var i = 0; i < samples; i++) {
        // Convert to SP
        r = math.sqrt(x*x + y*y + z*z);
        theta= math.acos(z/r);
        phi = math.atan(y/x);

        // Get current prob
        p = Psi2(n, l, m, r, theta, phi);

        // Draw new proposal state (use Normal Dist as proposal density)
        xNew = nz(x, 1.5);
        yNew = nz(y, 1.5);
        zNew = nz(z, 1.5);

        // Convert proposal point to SP
        rNew = math.sqrt(xNew*xNew + yNew*yNew + zNew*zNew);
        thetaNew = math.acos(zNew/rNew);
        phiNew = math.atan(yNew/xNew);

        // Get sampled point's prob
        pNew = Psi2(n, l, m, rNew, thetaNew, phiNew);

        // Accept or Reject point (since Proposal is symmetric, no need to add ratio of proposal)
        if(pNew > p) {
            // Accept new point
            x = xNew;
            y = yNew;
            z = zNew;
        } else {
            accept = Math.random() < (pNew/p);
            if(accept) {
                x = xNew;
                y = yNew;
                z = zNew;
            }
        }

        // Save point
        sampled.push([x, y, z]);
        //console.log([r, theta, phi]);
    }

    // Return samples after the burn period
    var finalSamples = [];
    for(var i = burn; i < samples; i = i + skip) {
        finalSamples.push(sampled[i]);
    }
    return finalSamples;
}

function rejectionSamplePsi2(n,l,m) {
    /* Draw a random sample from the probability distribution given
        1. Picks a random point x from uniform dist, calculates PDF there
        2. Picks another random pt y from [0,1], if y*M > PDF(x), repeat from 1, else return x
        
        - n,l,m - quantum numbers for orbital
    */
    var x, y, z, r, theta, phi, p, u;
    var samples = 0;

    do {
        // First generate random point 

        // Uniform sampling using cartesian
        /*
        x = math.random() * 2. * RMAX - RMAX;
        y = math.random() * 2. * RMAX - RMAX;
        z = math.random() * 2. * RMAX - RMAX;

        // Convert to spherical polar
        r = math.sqrt(x*x + y*y + z*z);
        theta = math.acos(z/r);
        phi = math.atan(y/x);
        */
        
        // Try generating random point in SP space (might suffer from artifacts at great R)
        r = math.random() * RMAX;
        theta = math.random() * PI;
        phi = math.random() * PI2;

        // Calculate Psi2 at this point
        p = Psi2(n,l,m,r,theta,phi);

        //console.log("p: " + p + " x:" + x + " y:" + y + " z:" + z + " r: " + r + " theta: " + theta + " phi: " + phi);

        
        if(p > 1 || isNaN(p)) {
            console.log("Psi2 has returned an invalid value");
            return null;
        }
        

        u = math.random() * M; // Uniform sample from [0,M] (M represents an upper bound on the PDF)

        samples++;

    } while (u > p && samples <= SAMPLEMAX);

    if(samples >= SAMPLEMAX) {
        console.log("Reached maximum number of samples of wave function.");
        return null;
    }

    // Convert point to Cartesian
    x = r * math.sin(theta) * math.cos(phi);
    y = r * math.sin(theta) * math.sin(phi);
    z = r * math.cos(theta); 

    return [x,y,z];
}







